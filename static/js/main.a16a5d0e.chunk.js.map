{"version":3,"sources":["useToggle/ExampleUseToggle.js","useToggle/useToggle.js","useTimeout/useTimeout.js","useTimeout/ExampleUseTimeout.js","useScrollDirection/ExampleUseScrollDirection.js","useScrollDirection/useScrollDirection.js","useLocalStorage/ExampleUseLocalStorage.js","useLocalStorage/useLocalStorage.js","useAsync/useAsync.js","useSafeDispatch/useSafeDispatch.js","utlis.js","useAsync/ExampleUseAsync.js","useDebounce/ExampleUseDebounce.js","useDebounce/useDebounce.js","useArray/ExampleUseArray.js","useArray/useArray.js","App.js","index.js"],"names":["ExampleUseToggle","initialState","useState","state","setState","toggle","useCallback","s","useToggle","isToggled","id","type","onClick","useTimeout","callback","delay","callbackRef","useRef","timeoutRef","useEffect","current","set","setTimeout","clear","clearTimeout","reset","ExampleUseTimeout","number","setNumber","prev","ExampleUseScrollDirection","direction","lastScrollTop","scrollDirection","setScrollDirection","handleScroll","scrollTop","window","pageYOffset","document","documentElement","addEventListener","removeEventListener","useScrollDirection","console","log","ExampleUseLocalStorage","key","defaultValue","serialize","JSON","stringify","deserialize","parse","valueInLocalStorage","localStorage","getItem","prevKeyRef","prevKey","removeItem","setItem","useLocalStorage","textInput","setTextInput","value","onChange","e","target","asyncReducer","action","status","data","error","Error","useAsync","useReducer","dispatch","mounted","useLayoutEffect","useSafeDispatch","run","promise","then","receivedData","setData","setError","fakeRequest","Promise","resolve","reject","body","ExampleUseAsync","myData","ExampleUseDebounce","dependencies","useDebounce","res","ExampleUseArray","initialArray","array","setArray","push","element","a","filter","update","index","newElement","slice","length","remove","useArray","n","App","className","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a16a5d0e.chunk.js","sourcesContent":["import { useToggle } from './useToggle';\r\n\r\nconst ExampleUseToggle = () => {\r\n  const [isToggled, toggle] = useToggle(false);\r\n\r\n  return (\r\n    <article id=\"use-toggle\">\r\n      <h2>useToggle</h2>\r\n      <button type=\"button\" onClick={toggle}>\r\n        {isToggled && 'toggled'}\r\n        {!isToggled && 'not toggled'}\r\n      </button>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseToggle;\r\n","import { useCallback, useState } from 'react';\r\n\r\n/**\r\n * Toggles a state.\r\n *\r\n * @param {boolean} initialState - initial toggle state.\r\n *\r\n * @returns {array} - toggle state and toggle function.\r\n */\r\n\r\nconst useToggle = (initialState = false) => {\r\n  const [state, setState] = useState(initialState);\r\n  const toggle = useCallback(() => setState((s) => !s), []);\r\n\r\n  return [state, toggle];\r\n};\r\n\r\nexport { useToggle };\r\n","import { useCallback, useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Runs a function inside a timeout and allows to control it by reseting\r\n * or by clearing it. Usefull for use with other custom hooks like useDebounce.\r\n *\r\n * @param {function} callback - the function to run after the delay.\r\n * @param {number} delay delay in ms.\r\n *\r\n * @returns {object} - { reset, clear }\r\n */\r\nconst useTimeout = (callback, delay) => {\r\n  const callbackRef = useRef(callback);\r\n  const timeoutRef = useRef();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  const set = useCallback(() => {\r\n    timeoutRef.current = setTimeout(() => callbackRef.current(), delay);\r\n  }, [delay]);\r\n\r\n  const clear = useCallback(() => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    set();\r\n    return clear;\r\n  }, [delay, set, clear]);\r\n\r\n  const reset = useCallback(() => {\r\n    clear();\r\n    set();\r\n  }, [clear, set]);\r\n\r\n  return { reset, clear };\r\n};\r\n\r\nexport { useTimeout };\r\n","import { useState } from 'react';\r\nimport { useTimeout } from './useTimeout';\r\n\r\nconst ExampleUseTimeout = () => {\r\n  const [number, setNumber] = useState(0);\r\n\r\n  const increment = () => setNumber((prev) => prev + 1);\r\n\r\n  // will run once on mount\r\n  // can't negate with one post clear()\r\n  // clear will clear the timeout\r\n  // reset can be used to trigger it again\r\n  const { clear, reset } = useTimeout(increment, 1000);\r\n\r\n  return (\r\n    <article id=\"use-timeout\">\r\n      <h2>useTimeout</h2>\r\n      <p>{number}</p>\r\n      <button type=\"button\" onClick={clear}>\r\n        Clear\r\n      </button>\r\n      <button type=\"button\" onClick={reset}>\r\n        Reset\r\n      </button>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseTimeout;\r\n","import { useScrollDirection } from './useScrollDirection';\r\n\r\nconst ExampleUseScrollDirection = () => {\r\n  const direction = useScrollDirection('down');\r\n  console.log('render');\r\n\r\n  return (\r\n    <article id=\"use-scroll-direction\">\r\n      <h2>useScrollDirection</h2>\r\n      <p>{direction}</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseScrollDirection;\r\n","import { useRef, useState, useEffect } from 'react';\r\n\r\n/**\r\n * Returns last vertical scroll direction.\r\n *\r\n * @param {string} initialState 'up' or 'down'.\r\n *\r\n * @return {string} - 'up' or 'down'.\r\n */\r\n\r\nconst useScrollDirection = (initialState) => {\r\n  const lastScrollTop = useRef(0);\r\n  const [scrollDirection, setScrollDirection] = useState(initialState);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const scrollTop =\r\n        window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n      if (scrollTop > lastScrollTop.current) {\r\n        lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;\r\n        setScrollDirection('down');\r\n      } else {\r\n        lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;\r\n        setScrollDirection('up');\r\n      }\r\n    };\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return scrollDirection;\r\n};\r\n\r\nexport { useScrollDirection };\r\n","import { useLocalStorage } from './useLocalStorage';\r\n\r\nconst ExampleUseLocalStorage = () => {\r\n  // textInput is saved in local storage on every change\r\n  const [textInput, setTextInput] = useLocalStorage('text');\r\n\r\n  const handleChange = (e) => {\r\n    setTextInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <article id=\"use-local-storage\">\r\n      <h2>useLocalStorage</h2>\r\n      <p>\r\n        The text written in the input is saved in local storage in real time\r\n      </p>\r\n      <input type=\"text\" value={textInput} onChange={handleChange} />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseLocalStorage;\r\n","import { useState, useRef, useEffect } from 'react';\r\n\r\n/**\r\n * Creates a state synced with the local storage.\r\n *\r\n * @param {String} key local storage key name.\r\n * @param {Object} defaultValue the value to use if it is not already in localStorage.\r\n * @param {{serialize: Function, deserialize: Function}} options the serialize and deserialize functions to use (defaults to JSON.stringify and JSON.parse).\r\n *\r\n * @returns {array} - [state, setState].\r\n */\r\nfunction useLocalStorage(\r\n  key,\r\n  defaultValue = '',\r\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {}\r\n) {\r\n  const [state, setState] = useState(() => {\r\n    const valueInLocalStorage = window.localStorage.getItem(key);\r\n    if (valueInLocalStorage) {\r\n      return deserialize(valueInLocalStorage);\r\n    }\r\n    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\r\n  });\r\n\r\n  const prevKeyRef = useRef(key);\r\n\r\n  useEffect(() => {\r\n    const prevKey = prevKeyRef.current;\r\n    if (prevKey !== key) {\r\n      window.localStorage.removeItem(prevKey);\r\n    }\r\n    prevKeyRef.current = key;\r\n    window.localStorage.setItem(key, serialize(state));\r\n  }, [key, state, serialize]);\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport { useLocalStorage };\r\n","/* eslint-disable no-shadow */\r\nimport { useCallback, useReducer } from 'react';\r\nimport { useSafeDispatch } from '../useSafeDispatch/useSafeDispatch';\r\n\r\nconst asyncReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'pending': {\r\n      return { status: 'pending', data: null, error: null };\r\n    }\r\n    case 'resolved': {\r\n      return { status: 'resolved', data: action.data, error: null };\r\n    }\r\n    case 'rejected': {\r\n      return { status: 'rejected', data: null, error: action.error };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Monitors an async promise. Pass your promise to the 'run'\r\n * returned function.\r\n *\r\n * @param {{status, data}} initialState object with initial status and data.\r\n *\r\n * @returns {object} {setData, setError, error, status, data, run}.\r\n * @returns status can be 'idle', 'pending', 'resolved', 'rejected'.\r\n */\r\nconst useAsync = (initialState) => {\r\n  const [state, unsafeDispatch] = useReducer(asyncReducer, {\r\n    status: 'idle',\r\n    data: null,\r\n    error: null,\r\n    ...initialState,\r\n  });\r\n\r\n  const dispatch = useSafeDispatch(unsafeDispatch);\r\n\r\n  const { data, error, status } = state;\r\n\r\n  const run = useCallback(\r\n    (promise) => {\r\n      dispatch({ type: 'pending' });\r\n      promise.then(\r\n        (receivedData) => {\r\n          dispatch({ type: 'resolved', data: receivedData });\r\n        },\r\n        (error) => {\r\n          dispatch({ type: 'rejected', error });\r\n        }\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const setData = useCallback(\r\n    (data) => dispatch({ type: 'resolved', data }),\r\n    [dispatch]\r\n  );\r\n  const setError = useCallback(\r\n    (error) => dispatch({ type: 'rejected', error }),\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    setData,\r\n    setError,\r\n    error,\r\n    status,\r\n    data,\r\n    run,\r\n  };\r\n};\r\n\r\nexport { useAsync };\r\n","/* eslint-disable no-void */\r\nimport { useRef, useLayoutEffect, useCallback } from 'react';\r\n\r\n/**\r\n * Returns the passed function as a safe variant which doesn't run\r\n * if the component is unmounted.\r\n *\r\n * @param {function} dispatch the function to make safe.\r\n *\r\n * @returns {function} - the safe variant of the passed function.\r\n */\r\nconst useSafeDispatch = (dispatch) => {\r\n  const mounted = useRef(false);\r\n\r\n  useLayoutEffect(() => {\r\n    mounted.current = true;\r\n    return () => {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return useCallback(\r\n    (...args) => (mounted.current ? dispatch(...args) : void 0),\r\n    [dispatch]\r\n  );\r\n};\r\n\r\nexport { useSafeDispatch };\r\n","function fakeRequest(delay = 100) {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(JSON.stringify({ body: 'something from server' }));\r\n\r\n      // error version\r\n      // reject(JSON.stringify({ body: 'something from server' }));\r\n    }, delay);\r\n  });\r\n\r\n  return promise;\r\n}\r\n\r\nexport { fakeRequest };\r\n","/* eslint-disable no-use-before-define */\r\nimport { useAsync } from './useAsync';\r\nimport { fakeRequest } from '../utlis';\r\n\r\nconst ExampleUseAsync = () => {\r\n  // the hook provides with all the async operation details\r\n  const {\r\n    data: myData,\r\n    setData,\r\n    setError,\r\n    error,\r\n    status,\r\n    run,\r\n  } = useAsync({ status: 'idle' });\r\n\r\n  const makeRequest = () => {\r\n    // you just pass your async promise-based func to the run function\r\n    // all the data after this async operation is available from the hook\r\n    run(fakeRequest(1000));\r\n  };\r\n\r\n  // use the details from the hook to conditionally render components\r\n  // which depend on the status or the error\r\n  return (\r\n    <article id=\"use-async\">\r\n      <h2>useAsync</h2>\r\n      <button onClick={makeRequest} type=\"button\">\r\n        Make request\r\n      </button>\r\n      <div>Request status: {status}</div>\r\n      {myData && <p>{myData}</p>}\r\n      {error && <p>An error occurred</p>}\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseAsync;\r\n","/* eslint-disable no-use-before-define */\r\nimport { useState } from 'react';\r\nimport { useDebounce } from './useDebounce';\r\nimport { fakeRequest } from '../utlis';\r\n\r\nconst ExampleUseDebounce = () => {\r\n  const [textInput, setTextInput] = useState('');\r\n  const [data, setData] = useState('');\r\n\r\n  const makeRequest = () => {\r\n    fakeRequest(0).then((res) => setData(res));\r\n  };\r\n\r\n  // you pass the async function, the delay and the state to dictate timer start\r\n  useDebounce(makeRequest, 1000, [textInput]);\r\n\r\n  const handleChange = (e) => {\r\n    setTextInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <article id=\"use-debounce\">\r\n      <h2>useDebounce</h2>\r\n      <p>The request will be made only after user stopped typing for 1s</p>\r\n      <input type=\"text\" value={textInput} onChange={handleChange} />\r\n      <p>Received: {data}</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseDebounce;\r\n","import { useEffect } from 'react';\r\nimport { useTimeout } from '../useTimeout/useTimeout';\r\n\r\n/**\r\n * Runs a timeout only after a state has stopped changing for an amount of ms.\r\n * It \"debounces\" the previous timeout if a state in the dep array has changed.\r\n * @param {function} callback The function to run.\r\n * @param {number} delay delay in ms.\r\n * @param {array} dependencies array of dependencies.\r\n */\r\nconst useDebounce = (callback, delay, dependencies) => {\r\n  const { reset, clear } = useTimeout(callback, delay);\r\n\r\n  // if dep changed reset the timer\r\n  useEffect(reset, [...dependencies, reset]);\r\n\r\n  // denies the very first run\r\n  useEffect(clear, [clear]);\r\n};\r\n\r\nexport { useDebounce };\r\n","import { useArray } from './useArray';\r\n\r\nconst ExampleUseArray = () => {\r\n  const initialArray = [1, 2, 3, 4, 5];\r\n  const { array, set, push, filter, update, remove, clear } =\r\n    useArray(initialArray);\r\n\r\n  return (\r\n    <article id=\"use-array\">\r\n      <h1>useArray</h1>\r\n      <p>{JSON.stringify(array)}</p>\r\n      <div>\r\n        <button onClick={() => set([1, 2, 3, 4, 5, 6])} type=\"button\">\r\n          set([1, 2, 3, 4, 5, 6])\r\n        </button>\r\n        <button onClick={() => push(0)} type=\"button\">\r\n          push(0)\r\n        </button>\r\n        <button onClick={() => filter((n) => n % 2 !== 0)} type=\"button\">\r\n          filter odd\r\n        </button>\r\n        <button onClick={() => update(1, 0)} type=\"button\">\r\n          update(1, 0)\r\n        </button>\r\n        <button onClick={() => remove(0)} type=\"button\">\r\n          remove(0)\r\n        </button>\r\n        <button onClick={() => clear()} type=\"button\">\r\n          clear()\r\n        </button>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ExampleUseArray;\r\n","import { useState } from 'react';\r\n\r\nconst useArray = (initialArray) => {\r\n  const [array, setArray] = useState(initialArray);\r\n\r\n  // push an element to the end\r\n  const push = (element) => {\r\n    setArray((a) => [...a, element]);\r\n  };\r\n\r\n  // filter with a callback\r\n  const filter = (callback) => {\r\n    setArray((a) => a.filter(callback));\r\n  };\r\n\r\n  // update an element at index position with a new element\r\n  const update = (index, newElement) => {\r\n    setArray((a) => [\r\n      ...a.slice(0, index),\r\n      newElement,\r\n      ...a.slice(index + 1, a.length),\r\n    ]);\r\n  };\r\n\r\n  // remove an element at index position\r\n  const remove = (index) => {\r\n    setArray((a) => [...a.slice(0, index), ...a.slice(index + 1, a.length)]);\r\n  };\r\n\r\n  // clear whole array\r\n  const clear = () => {\r\n    setArray([]);\r\n  };\r\n\r\n  // instead of setArray return \"set\"\r\n  return { array, set: setArray, push, filter, update, remove, clear };\r\n};\r\n\r\nexport { useArray };\r\n","import './App.css';\nimport ExampleUseToggle from './useToggle/ExampleUseToggle';\nimport ExampleUseTimeout from './useTimeout/ExampleUseTimeout';\nimport ExampleUseScrollDirection from './useScrollDirection/ExampleUseScrollDirection';\nimport ExampleUseLocalStorage from './useLocalStorage/ExampleUseLocalStorage';\nimport ExampleUseAsync from './useAsync/ExampleUseAsync';\nimport ExampleUseDebounce from './useDebounce/ExampleUseDebounce';\nimport ExampleUseArray from './useArray/ExampleUseArray';\n\nconst App = () => (\n  <div>\n    <h1>Cutom Hooks</h1>\n    <ol className=\"list-custom-hooks\">\n      <li>\n        <a href=\"#use-toggle\">useToggle</a>\n      </li>\n      <li>\n        <a href=\"#use-timeout\">usetimeout</a>\n      </li>\n      <li>\n        <a href=\"#use-scroll-direction\">useScrollDirection</a>\n      </li>\n      <li>\n        <a href=\"#use-local-storage\">uselocalStorage</a>\n      </li>\n      <li>\n        <a href=\"#use-async\">useAsync</a>\n      </li>\n      <li>\n        <a href=\"#use-debounce\">useDebounce</a>\n      </li>\n      <li>\n        <a href=\"#use-array\">useArray</a>\n      </li>\n    </ol>\n\n    <ExampleUseToggle />\n    <hr />\n    <ExampleUseTimeout />\n    <hr />\n    <ExampleUseScrollDirection />\n    <hr />\n    <ExampleUseLocalStorage />\n    <hr />\n    <ExampleUseAsync />\n    <hr />\n    <ExampleUseDebounce />\n    <hr />\n    <ExampleUseArray />\n    <hr />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}